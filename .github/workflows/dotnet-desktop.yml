# This workflow uses actions that are not certified by GitHub.
name: .NET Desktop

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  Wap_build: true

jobs:

  prerequirements:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - uses: azure/login@v1
      if: env.Wap_build == 'true'
      with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Download certificate & install
      uses: azure/cli@v2
      if: env.Wap_build == 'true'
      with:
        azcliversion: 2.30.0
        inlineScript: |       
          $keyvaultname = "getkeyvault"
          $keyvaultSecretField = "AppPublisherCertificateName"
          # get certificate from azure
          $secret = Get-AzKeyVaultSecret -VaultName $keyvaultname -Name $keyvaultSecretField
          echo $secret
          dir

  build:

    strategy:
      matrix:
        # configuration: [Debug, Release]
        # targetplatform: [x86, x64]
        configuration: [Release]
        targetplatform: [x64]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: KeyboardMouse.sln                         # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: KeyboardMouseWin.Test                 # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      Wpf_build: false
      Wpf_Project_Path: KeyboardMouseWin                 # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.
      Wap_build: true
      Wap_Project_Directory: your-wap-project-directory-name    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      Wap_Project_Path: KeyboardMouseWin.Wap                # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.
      AppxBundle: Never
      BuildMode: SideLoadOnly
      Configuration: Release
      TargetPlatform: ${{ matrix.targetplatform }}
      RuntimeIdentifier: win-${{ matrix.targetplatform }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Install the .NET workload
    - name: Install .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x

    # Add  MsBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Add msbuild to PATH
      if: env.Wap_build == 'true'
      uses: microsoft/setup-msbuild@v2
      with:
        vs-prerelease: false
        #msbuild-architecture: x64

    - name: Generate version number with date and workflow Run Number
      if: env.Wap_build == 'true'
      id: version-creator
      run: |
        $buildDay = Get-Date -Format "yyyy.Mdd"
        $runNumber = "$env:GITHUB_RUN_NUMBER"
        $ver = $buildDay + "." + $runNumber + ".0"
        echo "::set-output name=APP_VERSION::$ver"

    - name: Update manifest version
      if: env.Wap_build == 'true'
      run: |
        [xml]$manifest = get-content "$env:Wap_Project_Path\Package.appxmanifest"
        $manifest.Package.Identity.Version = "${{ steps.version-creator.outputs.APP_VERSION }}"
        $manifest.save("$env:Wap_Project_Path\Package.appxmanifest")

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      if: env.Wpf_build == 'true'
      run: dotnet restore ${{ env.Wpf_Project_Path }}/${{ env.Wpf_Project_Path }}.csproj
      env:
        Configuration: ${{ matrix.configuration }}

    # Build the application
    - name: Build the application
      if: env.Wpf_build == 'true'
      run: dotnet build ${{ env.Wpf_Project_Path }}/${{ env.Wpf_Project_Path }}.csproj --configuration ${{ matrix.configuration }}

    - name: Build the test application
      if: env.Wpf_build == 'true'
      run: dotnet build ${{ env.Test_Project_Path }}/${{ env.Test_Project_Path }}.csproj --configuration ${{ matrix.configuration }}
    
      # Execute all unit tests in the solution
    - name: Execute unit tests
      if: env.Wpf_build == 'true'
      run: dotnet test ${{ env.Test_Project_Path }} --configuration ${{ matrix.configuration }}

    # Publish the Wap package
    - name: Publish the Wpf package
      if: github.event_name != 'pull_request' && env.Wpf_build == 'true'
      run: dotnet publish ${{ env.Wpf_Project_Path }} --no-restore -c ${{ matrix.configuration }} --self-contained true -r win-x64 -o ./published

    # Upload the published app as an artifact
    - name: Upload artifact
      if: github.event_name != 'pull_request' && env.Wpf_build == 'true'
      uses: actions/upload-artifact@v2
      with:
        name: published-app
        path: ./published/

    - name: Get rid of all for wapproj
      if: env.Wap_build == 'true'
      run: dotnet clean ${{ env.Wpf_Project_Path }}/${{ env.Wpf_Project_Path }}.csproj
    

    # Build the Windows Application Packaging project
    - name: Build the Windows Application Packaging Project (wapproj)
      if: env.Wap_build == 'true'
      run: msbuild $env:Wap_Project_Path/$env:Wap_Project_Path.wapproj /t:Restore /p:Platform=${{ matrix.configuration }}  /p:TargetFramework=net8.0-windows /p:Runtimeidentifier=win-$env:TargetPlatform
      #run: msbuild $env:Wap_Project_Path/$env:Wap_Project_Path.wapproj /p:Platform=$env:TargetPlatform /p:Configuration=$env:Configuration 
      # /p:UapAppxPackageBuildMode=$env:BuildMode /p:AppxBundle=$env:AppxBundle /p:PackageCertificateKeyFile=$env:SigningCertificate /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
      env:
        AppxBundle: Never
        BuildMode: SideLoadOnly
        Configuration: Release
        TargetPlatform: ${{ matrix.targetplatform }}




    # Upload the MSIX package: https://github.com/marketplace/actions/upload-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      if: github.event_name != 'pull_request' && env.Wap_build == 'true'
      with:
        name: MSIX Package
        path: MyWpfApp.Package\AppPackages\